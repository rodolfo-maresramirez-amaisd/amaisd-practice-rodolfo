
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});

exports.Prisma.AcceptableUseAgreementScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  studentDate: 'studentDate',
  enrolledByDate: 'enrolledByDate',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.AcknowledgeHandbookScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accessByHomeComputer: 'accessByHomeComputer',
  accessBySchoolComputer: 'accessBySchoolComputer',
  accessByHardCopyInLibrary: 'accessByHardCopyInLibrary',
  receiveInPerson: 'receiveInPerson',
  date: 'date',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.ActivitiesTravelElementaryScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  permission: 'permission',
  accidentInsurance: 'accidentInsurance',
  date: 'date',
  homePhone: 'homePhone',
  businessEmergencyPhone: 'businessEmergencyPhone',
  address: 'address',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.ActivitiesTravelSecondaryScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  permission: 'permission',
  accidentInsurance: 'accidentInsurance',
  date: 'date',
  homePhone: 'homePhone',
  businessEmergencyPhone: 'businessEmergencyPhone',
  address: 'address',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.AppConfigScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  key: 'key',
  value: 'value',
  section: 'section'
};

exports.Prisma.BYODOptInScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  byodBoolean: 'byodBoolean',
  byod: 'byod',
  date: 'date',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.COPPAScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  date: 'date',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.EarlyChildhoodSurveyScalarFieldEnum = {
  permitControlNumber: 'permitControlNumber',
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  date: 'date',
  parentsAsTeachers: 'parentsAsTeachers',
  dollyPartonLibrary: 'dollyPartonLibrary',
  yearsInDollyPartonLibrary: 'yearsInDollyPartonLibrary',
  kinderbridgeSession: 'kinderbridgeSession',
  kinderbridgeSessionsPerYearBefore3: 'kinderbridgeSessionsPerYearBefore3',
  kinderbridgeSessionsPerYearAfter3: 'kinderbridgeSessionsPerYearAfter3',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.EthnicityRaceScalarFieldEnum = {
  permitControlNumber: 'permitControlNumber',
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  observerName: 'observerName',
  campus: 'campus',
  date: 'date',
  ethnicityEn: 'ethnicityEn',
  ethnicitySp: 'ethnicitySp',
  americanIndianOrAlaskaNative: 'americanIndianOrAlaskaNative',
  asian: 'asian',
  blackOrAfricanAmerican: 'blackOrAfricanAmerican',
  nativeHawaiian: 'nativeHawaiian',
  white: 'white',
  indioAmericano: 'indioAmericano',
  asiatico: 'asiatico',
  negro: 'negro',
  nativoDeHawai: 'nativoDeHawai',
  blanco: 'blanco',
  observedEthnicityEn: 'observedEthnicityEn',
  observedAmericanIndianOrAlaskaNative: 'observedAmericanIndianOrAlaskaNative',
  observedAsian: 'observedAsian',
  observedBlackOrAfricanAmerican: 'observedBlackOrAfricanAmerican',
  observedNativeHawaiian: 'observedNativeHawaiian',
  observedWhite: 'observedWhite',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.FamilySurveyScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  movedInLast3Years: 'movedInLast3Years',
  agriOrFishingWork: 'agriOrFishingWork',
  enrolledInMigrantEdProgram: 'enrolledInMigrantEdProgram',
  date: 'date',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.FoodAllergyScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  parentWorkPhone: 'parentWorkPhone',
  parentMobilePhone: 'parentMobilePhone',
  parentHomePhone: 'parentHomePhone',
  hasFoodAllergies: 'hasFoodAllergies',
  date: 'date',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.FoodAllergyItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  foodAllergyId: 'foodAllergyId',
  foodName: 'foodName',
  lifeThreatening: 'lifeThreatening',
  nature: 'nature',
  importedAt: 'importedAt'
};

exports.Prisma.FosterCareScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  situation: 'situation',
  ssnLast4: 'ssnLast4',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.HealthHistoryScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  foodAllergyID: 'foodAllergyID',
  date: 'date',
  emergencyContactNumber: 'emergencyContactNumber',
  beeOrWaspAllergy: 'beeOrWaspAllergy',
  otherAllergies: 'otherAllergies',
  otherAllergiesList: 'otherAllergiesList',
  epiPen: 'epiPen',
  anemia: 'anemia',
  sickleCell: 'sickleCell',
  arthritis: 'arthritis',
  arthritisDiagnosis: 'arthritisDiagnosis',
  asthma: 'asthma',
  bladderKidney: 'bladderKidney',
  bladderKidneyDiagnosis: 'bladderKidneyDiagnosis',
  cancer: 'cancer',
  cancerDiagnosis: 'cancerDiagnosis',
  diabetes: 'diabetes',
  heartDisease: 'heartDisease',
  heartDiseaseDiagnosis: 'heartDiseaseDiagnosis',
  highBP: 'highBP',
  highBPDiagnosis: 'highBPDiagnosis',
  muscularOrOrthopedic: 'muscularOrOrthopedic',
  muscularOrOrthopedicDiagnosis: 'muscularOrOrthopedicDiagnosis',
  neurological: 'neurological',
  neurologicalDiagnosis: 'neurologicalDiagnosis',
  seizures: 'seizures',
  other: 'other',
  visionImpairment: 'visionImpairment',
  visionImpairmentComments: 'visionImpairmentComments',
  hearingImpairment: 'hearingImpairment',
  hearingImpairmentComments: 'hearingImpairmentComments',
  scoliosisImpairment: 'scoliosisImpairment',
  scoliosisComments: 'scoliosisComments',
  seriousIllnesses: 'seriousIllnesses',
  primaryCarePhys: 'primaryCarePhys',
  primaryCarePhysPhone: 'primaryCarePhysPhone',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.HealthHistoryV2ScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  foodAllergyID: 'foodAllergyID',
  date: 'date',
  parentSignature: 'parentSignature',
  authorize: 'authorize',
  medicalAttestation: 'medicalAttestation',
  emergencyContactNumber: 'emergencyContactNumber',
  beeswasps: 'beeswasps',
  other: 'other',
  otherComments: 'otherComments',
  anemia: 'anemia',
  sickleCell: 'sickleCell',
  arthritis: 'arthritis',
  anaphylaxis: 'anaphylaxis',
  asthma: 'asthma',
  addOrAdhd: 'addOrAdhd',
  anxiety: 'anxiety',
  visionImpairment: 'visionImpairment',
  seasonalAllergies: 'seasonalAllergies',
  foodAllergies: 'foodAllergies',
  cancer: 'cancer',
  depression: 'depression',
  diabetes: 'diabetes',
  kidneyDisease: 'kidneyDisease',
  headInjury: 'headInjury',
  hearingImpairment: 'hearingImpairment',
  frequentSevereHeadaches: 'frequentSevereHeadaches',
  heartProblemsOrMurmur: 'heartProblemsOrMurmur',
  highBloodPressure: 'highBloodPressure',
  nerveOrMuscleDisease: 'nerveOrMuscleDisease',
  seizuresOrConvulsions: 'seizuresOrConvulsions',
  scoliosisImpairment: 'scoliosisImpairment',
  gastrointestinalIssues: 'gastrointestinalIssues',
  seriousIllnesses: 'seriousIllnesses',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt',
  prescriptionAttestation: 'prescriptionAttestation',
  medicationAllergies: 'medicationAllergies'
};

exports.Prisma.HomeLanguageSurveyScalarFieldEnum = {
  permitControlNumber: 'permitControlNumber',
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  childLanguage: 'childLanguage',
  homeLanguage: 'homeLanguage',
  date: 'date',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.HomeLanguageSurveyNewScalarFieldEnum = {
  permitControlNumber: 'permitControlNumber',
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  q1: 'q1',
  q2: 'q2',
  q3: 'q3',
  correctionAgreement: 'correctionAgreement',
  date: 'date',
  formCompletedBy: 'formCompletedBy',
  signature: 'signature',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.InformationReleaseNonSchoolSponsoredScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  permission: 'permission',
  date: 'date',
  permissionBoolean: 'permissionBoolean',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.InformationReleaseSchoolSponsoredScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  permission: 'permission',
  date: 'date',
  permissionBoolean: 'permissionBoolean',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.MediaReleaseFormScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  permission: 'permission',
  date: 'date',
  permissionBoolean: 'permissionBoolean',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.MilitaryConnectedScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  militaryConnected: 'militaryConnected',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.PermitToRegisterScalarFieldEnum = {
  controlNumber: 'controlNumber',
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  archived: 'archived',
  processed: 'processed',
  status: 'status',
  statusComments: 'statusComments',
  schoolYear: 'schoolYear',
  studentId: 'studentId',
  campusId: 'campusId',
  firstName: 'firstName',
  lastName: 'lastName',
  middleName: 'middleName',
  studentDOB: 'studentDOB',
  SSN: 'SSN',
  gender: 'gender',
  grade: 'grade',
  primaryPhone: 'primaryPhone',
  typeOfPhone: 'typeOfPhone',
  bornOutsideUSA: 'bornOutsideUSA',
  birthCountry: 'birthCountry',
  streetAddress1: 'streetAddress1',
  streetAddress2: 'streetAddress2',
  city: 'city',
  state: 'state',
  zip: 'zip',
  country: 'country',
  siblings: 'siblings',
  parent1Relation: 'parent1Relation',
  parent1FullName: 'parent1FullName',
  parent1DOB: 'parent1DOB',
  parent1Address: 'parent1Address',
  parent1PrimaryPhone: 'parent1PrimaryPhone',
  parent1WorkPhone: 'parent1WorkPhone',
  parent1Employer: 'parent1Employer',
  parent1Email: 'parent1Email',
  parent2Relation: 'parent2Relation',
  parent2FullName: 'parent2FullName',
  parent2DOB: 'parent2DOB',
  parent2Address: 'parent2Address',
  parent2PrimaryPhone: 'parent2PrimaryPhone',
  parent2WorkPhone: 'parent2WorkPhone',
  parent2Employer: 'parent2Employer',
  parent2Email: 'parent2Email',
  emergency1FullName: 'emergency1FullName',
  emergency1Relation: 'emergency1Relation',
  emergency1PrimaryPhone: 'emergency1PrimaryPhone',
  emergency1CellPhone: 'emergency1CellPhone',
  emergency2Relation: 'emergency2Relation',
  emergency2PrimaryPhone: 'emergency2PrimaryPhone',
  emergency2CellPhone: 'emergency2CellPhone',
  emergency2FullName: 'emergency2FullName',
  attendedAISD: 'attendedAISD',
  lastSchoolName: 'lastSchoolName',
  expulsion: 'expulsion',
  DAEP: 'DAEP',
  probation: 'probation',
  enrolledByName: 'enrolledByName',
  enrolledByRelation: 'enrolledByRelation',
  enrolledByAddress: 'enrolledByAddress',
  enrolledByDOB: 'enrolledByDOB',
  formCompletetionStatus: 'formCompletetionStatus',
  formType: 'formType',
  foodAllergyHasChanged: 'foodAllergyHasChanged',
  healthHistoryHasChanged: 'healthHistoryHasChanged',
  importedAt: 'importedAt',
  dollyPartonImaginationLibrary: 'dollyPartonImaginationLibrary',
  parentsAsTeachersProgram: 'parentsAsTeachersProgram',
  duplicate: 'duplicate',
  filed: 'filed',
  filedAt: 'filedAt',
  acceptedTerms: 'acceptedTerms',
  emergency1FirstName: 'emergency1FirstName',
  emergency1LastName: 'emergency1LastName',
  emergency2FirstName: 'emergency2FirstName',
  emergency2LastName: 'emergency2LastName',
  parent1FirstName: 'parent1FirstName',
  parent1LastName: 'parent1LastName',
  parent2FirstName: 'parent2FirstName',
  parent2LastName: 'parent2LastName'
};

exports.Prisma.PrescriptionItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  reason: 'reason',
  healthHistoryId: 'healthHistoryId',
  importedAt: 'importedAt',
  healthHistoryV2Id: 'healthHistoryV2Id'
};

exports.Prisma.PriorEducationSurveyScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  age: 'age',
  importedAt: 'importedAt',
  attendedUnitedStatesSchool: 'attendedUnitedStatesSchool',
  completedThreeFullSchoolYearsInUS: 'completedThreeFullSchoolYearsInUS',
  dateFirstSchoolAttended: 'dateFirstSchoolAttended',
  filed: 'filed',
  filedAt: 'filedAt',
  firstSchoolCityState: 'firstSchoolCityState',
  unitedStatesFirstSchool: 'unitedStatesFirstSchool'
};

exports.Prisma.SiblingItemScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastName: 'lastName',
  firstName: 'firstName',
  grade: 'grade',
  schoolName: 'schoolName',
  srqId: 'srqId',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.SocioeconomicScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  snapAssistance: 'snapAssistance',
  tanfAssistance: 'tanfAssistance',
  householdMembers: 'householdMembers',
  incomeRange: 'incomeRange',
  certification: 'certification',
  date: 'date',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.SpecialServicesScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  previousESLServices: 'previousESLServices',
  bilingualServices: 'bilingualServices',
  gtServices: 'gtServices',
  section504Services: 'section504Services',
  specialEdServices: 'specialEdServices',
  cityAndState: 'cityAndState',
  previousDistrict: 'previousDistrict',
  previousSchool: 'previousSchool',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.StudentInfoReleaseB3ScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  militaryAuth: 'militaryAuth',
  higherEdAuth: 'higherEdAuth',
  dateMilitary: 'dateMilitary',
  dateHigherEd: 'dateHigherEd',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.StudentResidencyQuestionaireScalarFieldEnum = {
  id: 'id',
  permitControlNumber: 'permitControlNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  presentlyResiding: 'presentlyResiding',
  date: 'date',
  acceptedTerms: 'acceptedTerms',
  importedAt: 'importedAt',
  filed: 'filed',
  filedAt: 'filedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  AcceptableUseAgreement: 'AcceptableUseAgreement',
  AcknowledgeHandbook: 'AcknowledgeHandbook',
  ActivitiesTravelElementary: 'ActivitiesTravelElementary',
  ActivitiesTravelSecondary: 'ActivitiesTravelSecondary',
  AppConfig: 'AppConfig',
  BYODOptIn: 'BYODOptIn',
  COPPA: 'COPPA',
  EarlyChildhoodSurvey: 'EarlyChildhoodSurvey',
  EthnicityRace: 'EthnicityRace',
  FamilySurvey: 'FamilySurvey',
  FoodAllergy: 'FoodAllergy',
  FoodAllergyItem: 'FoodAllergyItem',
  FosterCare: 'FosterCare',
  HealthHistory: 'HealthHistory',
  HealthHistoryV2: 'HealthHistoryV2',
  HomeLanguageSurvey: 'HomeLanguageSurvey',
  HomeLanguageSurveyNew: 'HomeLanguageSurveyNew',
  InformationReleaseNonSchoolSponsored: 'InformationReleaseNonSchoolSponsored',
  InformationReleaseSchoolSponsored: 'InformationReleaseSchoolSponsored',
  MediaReleaseForm: 'MediaReleaseForm',
  MilitaryConnected: 'MilitaryConnected',
  PermitToRegister: 'PermitToRegister',
  PrescriptionItem: 'PrescriptionItem',
  PriorEducationSurvey: 'PriorEducationSurvey',
  SiblingItem: 'SiblingItem',
  Socioeconomic: 'Socioeconomic',
  SpecialServices: 'SpecialServices',
  StudentInfoReleaseB3: 'StudentInfoReleaseB3',
  StudentResidencyQuestionaire: 'StudentResidencyQuestionaire'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
